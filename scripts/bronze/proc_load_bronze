/*
SQL Stored Procedure: bronze.load_bronze

Purpose: This stored procedure is designed to automate the initial loading
         of raw data into the 'bronze' schema of the Data Warehouse.
         It acts as the first stage of the ETL (Extract, Transform, Load) process.

Actions:
1.  **Initialization**: Declares variables to track the start and end times
    for overall bronze layer loading and individual table loads, enabling
    performance monitoring.
2.  **Error Handling**: Implements a TRY...CATCH block to gracefully handle
    any errors that may occur during the data loading process, printing
    error messages for debugging.
3.  **CRM Data Ingestion**:
    * **Truncates** existing data in the following CRM-related tables within the 'bronze' schema:
        * `bronze.crm_cust_info`
        * `bronze.crm_prd_info`
        * `bronze.crm_sales_details`
    * **Bulk Inserts** data from specified CSV files located in
        `F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_crm\`
        into these respective tables.
    * Uses `FIRSTROW = 2` to skip header rows and `FIELDTERMINATOR = ','` for comma-separated values.
    * Measures and prints the time taken for each individual table load.
4.  **ERP Data Ingestion**:
    * **Truncates** existing data in the following ERP-related tables within the 'bronze' schema:
        * `bronze.erp_cust_az12`
        * `bronze.erp_loc_a101`
        * `bronze.erp_px_cat_g1v2`
    * **Bulk Inserts** data from specified CSV files located in
        `F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_erp\`
        into these respective tables.
    * Uses `FIRSTROW = 2` to skip header rows and `FIELDTERMINATOR = ','` for comma-separated values.
    * Measures and prints the time taken for each individual table load.
5.  **Performance Logging**: Prints messages indicating the start and end of
    the bronze layer loading, along with the total time taken for the
    entire process.

Prerequisites:
* The 'bronze' schema must exist in the database.
* The specified CSV files must be accessible at the defined file paths
    on the SQL Server's file system.
* The SQL Server service account must have read permissions on the CSV file locations.

Usage: Execute this stored procedure to load the initial raw data into the
       bronze layer, preparing it for further processing in the silver layer.
*/

CREATE OR ALTER PROCEDURE bronze.load_bronze AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME, @start_bronze_layer DATETIME, @end_bronze_layer DATETIME
	BEGIN TRY	
		PRINT '---------------------';
		PRINT 'Loading Bronze Layer ';
		PRINT '---------------------';

		PRINT 'Loading CRM Tables...';

		SET @start_bronze_layer = GETDATE()

		SET @start_time = GETDATE()
		PRINT '>> Truncating Table: bronze.crm_cust_info';
		TRUNCATE TABLE bronze.crm_cust_info;

		PRINT '>> Inserting Into Table: bronze.crm_cust_info';
		BULK INSERT bronze.crm_cust_info
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_crm\cust_info.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE()
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms'

		PRINT '>> Truncating Table: bronze.crm_prd_info';
		SET @start_time = GETDATE()
		TRUNCATE TABLE bronze.crm_prd_info;

		PRINT '>> Inserting Into Table: bronze.crm_prd_info';
		BULK INSERT bronze.crm_prd_info
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_crm\prd_info.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE();
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms'

		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: bronze.crm_sales_details';
		TRUNCATE TABLE bronze.crm_sales_details;

		PRINT '>> Inserting Into Table: bronze.crm_sales_details';
		BULK INSERT bronze.crm_sales_details
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_crm\sales_details.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE();
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms';

		PRINT 'Loading CRM Tables...';

		SET @start_time = GETDATE()
		PRINT '>> Truncating Table: bronze.erp_cust_az12';
		TRUNCATE TABLE bronze.erp_cust_az12;

		PRINT '>> Inserting Into Table: bronze.erp_cust_az12';
		BULK INSERT bronze.erp_cust_az12
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_erp\CUST_AZ12.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE()
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms'

		SET @start_time = GETDATE()
		PRINT '>> Truncating Table: bronze.erp_loc_a101';
		TRUNCATE TABLE bronze.erp_loc_a101;

		PRINT '>> Inserting Into Table: bronze.erp_loc_a101';
		BULK INSERT bronze.erp_loc_a101
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_erp\LOC_A101.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE()
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms'

		SET @start_time = GETDATE()
		PRINT '>> Truncating Table: bronze.erp_px_cat_g1v2';
		TRUNCATE TABLE bronze.erp_px_cat_g1v2;

		PRINT '>> Inserting Into Table: bronze.erp_px_cat_g1v2';
		BULK INSERT bronze.erp_px_cat_g1v2
		FROM 'F:\SQL Course\Data Warehousing Project - Baraa\datasets\source_erp\PX_CAT_G1V2.csv'
		WITH (
			FIRSTROW = 2,			-- skips header
			FIELDTERMINATOR = ',',  -- delimiter
			TABLOCK
		);
		SET @end_time = GETDATE()
		PRINT 'Time taken: ' + CAST(DATEDIFF(microsecond, @start_time, @end_time) AS NVARCHAR) + 'ms'
		SET @end_bronze_layer = GETDATE()
		PRINT '--------------------------------------------';
		PRINT 'Time taken for Bronze Layer: ' + CAST(DATEDIFF(microsecond, @start_bronze_layer, @end_bronze_layer) AS NVARCHAR) + 'ms'
		PRINT '--------------------------------------------';
	
	END TRY
	BEGIN CATCH
	PRINT '--------------------------------------------';
	PRINT 'ERROR OCCURED DURING LOADING BRONZE LAYER...';
	PRINT '--------------------------------------------';
	PRINT 'Error: ' + ERROR_MESSAGE();
	PRINT 'Error No.' + CAST(ERROR_NUMBER() AS NVARCHAR);
	PRINT 'Error State.' + CAST(ERROR_STATE() AS NVARCHAR);
	END CATCH
END
